{"version":3,"sources":["contexts/tokenRegistryContext.tsx","contexts/walletContext.tsx","utils/accounts.ts","components/MainPage.tsx","App.tsx","index.tsx"],"names":["TokenRegistryContext","createContext","Map","TokenRegistryContextProvider","props","useState","tokenRegistry","setTokenRegistry","useEffect","TokenListProvider","resolve","then","tokens","tokenMap","getList","forEach","item","set","address","Provider","value","children","WalletContext","useWalletContext","context","useContext","Error","WalletContextProvider","walletAddress","setWalletAddress","a","window","solana","isPhantom","connect","on","publicKey","toString","transaction","signTransaction","state","connectWallet","listEmptyTokenAccounts","connection","ownerAddress","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","allTokens","map","accountInfo","accountAddress","pubkey","mintAddress","account","data","parsed","info","mint","amount","tokenAmount","name","get","emptyTokens","filter","token","sort","b","localeCompare","buildCloseTokenAccountInstruction","Token","createCloseAccountInstruction","Container","styled","div","MainContent","AddressContent","span","Section","SectionTitle","SectionContent","TokenContainer","TokenItem","TokenName","TokenMint","TokenCloseButton","button","WelcomeContainer","ConnectButton","EmptyTokens","emptyAccounts","triggerUpdate","setTriggerUpdate","isLoading","setIsLoading","feePayer","PublicKey","getRecentBlockhash","recentBlockhash","blockhash","tx","Transaction","add","signedTx","sendRawTransaction","serialize","txId","console","log","Promise","setTimeout","error","content","length","href","target","rel","onClick","closeAccount","disabled","WelcomePage","MainPage","useTokenRegistryContext","setEmptyAccounts","useMemo","Connection","size","ownerPublicKey","loadingContent","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0eac620.chunk.js","sourcesContent":["import { TokenInfo, TokenInfoMap, TokenListContainer, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const TokenRegistryContext = createContext<TokenInfoMap>(new Map());\n\nexport function useTokenRegistryContext() {\n  const context = useContext(TokenRegistryContext);\n  if (!context) {\n    throw new Error(\"TokenRegistryContext not set\");\n  }\n\n  return context;\n}\n\nexport function TokenRegistryContextProvider(props: any) {\n  const [tokenRegistry, setTokenRegistry] = useState<TokenInfoMap>(new Map());\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then((tokens: TokenListContainer) => {\n      const tokenMap: TokenInfoMap = new Map();\n      tokens.getList().forEach((item: TokenInfo) => {\n        tokenMap.set(item.address, item);\n      });\n      setTokenRegistry(tokenMap);\n    });\n  }, []);\n\n  return (\n    <TokenRegistryContext.Provider value={tokenRegistry}>\n      {props.children}\n    </TokenRegistryContext.Provider>\n  );\n}","import { Transaction } from \"@solana/web3.js\";\nimport { createContext, useContext, useState } from \"react\";\n\nexport type WalletContextValue = {\n  walletAddress: string | null;\n  connectWallet: () => void;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n}\n\nexport const WalletContext = createContext<WalletContextValue | null>(null);\n\nexport function useWalletContext() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"WalletContext not set\");\n  }\n\n  return context;\n}\n\nexport function WalletContextProvider(props: any) {\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n\n  async function connectWallet() {\n    if (!((window as any).solana?.isPhantom)) {\n      return;\n    }\n\n    (window as any).solana.connect();\n    (window as any).solana.on(\"connect\", () => {\n      setWalletAddress((window as any).solana.publicKey.toString());\n    });\n  }\n\n  async function signTransaction(transaction: Transaction) {\n    return await (window as any).solana.signTransaction(transaction);\n  }\n\n  const state = {\n    walletAddress,\n    connectWallet,\n    signTransaction\n  };\n\n  return (\n    <WalletContext.Provider value={state}>\n      {props.children}\n    </WalletContext.Provider>\n  )\n}\n","import { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { TokenInfoMap } from '@solana/spl-token-registry';\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\n\nexport async function listEmptyTokenAccounts(\n  connection: Connection,\n  ownerAddress: PublicKey,\n  tokenRegistry: TokenInfoMap\n) {\n  const { value } = await connection.getParsedTokenAccountsByOwner(\n    ownerAddress,\n    {programId: TOKEN_PROGRAM_ID}\n  );\n\n  const allTokens = value.map((accountInfo: any) => {\n    const accountAddress = accountInfo.pubkey as string;\n    const mintAddress = accountInfo.account.data.parsed.info.mint as string;\n    const amount = accountInfo.account.data.parsed.info.tokenAmount;\n    const name = tokenRegistry.get(mintAddress)?.name;\n    return { accountAddress, mintAddress, amount, name };\n  });\n\n  const emptyTokens = allTokens.filter((token) => token.amount.amount === \"0\");\n  emptyTokens.sort((a, b) => {\n    if (!a.name) {\n      return 1;\n    }\n    \n    if (!b.name) {\n      return -1;\n    }\n\n    return a.name.localeCompare(b.name);\n  });\n  return emptyTokens;\n}\n\nexport function buildCloseTokenAccountInstruction(\n  ownerAddress: PublicKey,\n  accountAddress: PublicKey\n): TransactionInstruction {\n  return Token.createCloseAccountInstruction(\n    TOKEN_PROGRAM_ID,\n    accountAddress,\n    ownerAddress,\n    ownerAddress,\n    []\n  );\n}","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useWalletContext, useTokenRegistryContext } from \"../contexts/\";\nimport { buildCloseTokenAccountInstruction, listEmptyTokenAccounts } from \"../utils/accounts\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #030403;\n  font-size: 16px;\n  margin-top: 25px;\n`;\n\nconst MainContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst AddressContent = styled.span`\n  font-family: Monospace;\n\n  a, a:visited, a:hover {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n`\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n`;\n\nconst SectionTitle = styled.span`\n  display: block;\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n`;\n\nconst SectionContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TokenContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  min-width: 520px;\n  margin-bottom: 20px;\n`;\n\nconst TokenItem = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TokenName = styled.span`\n  display: block;\n  font-weight: bold;\n  font-family: Monospace;\n  margin-bottom: 4px;\n`;\n\nconst TokenMint = styled.span`\n  display: block;\n  font-family: Monospace;\n\n  a, a:visited, a:hover {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst TokenCloseButton = styled.button`\n  background-color: transparent;\n  color: #86726c;\n  border: 4px solid #86726c;\n  border-radius: 12px;\n  padding: 4px 8px;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  font-weight: bold;\n  &:hover {\n    background-color: rgba(134, 114, 108, 0.9);\n    color: #f6f6f2;\n  }\n`;\n\nconst WelcomeContainer = styled.div`\n  display: flex;\n`;\n\nconst ConnectButton = styled.button`\n  background-color: transparent;\n  color: #606768;\n  border: 4px solid #606768;\n  border-radius: 12px;\n  padding: 15px 32px;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  font-size: 18px;\n  font-weight: bold;\n  &:hover {\n    background-color: rgba(96, 103, 104, 0.8);\n    color: #f6f6f2;\n  }\n`;\n\nfunction MainPage() {\n  const { walletAddress, signTransaction } = useWalletContext();\n  const tokenRegistry = useTokenRegistryContext();\n  const [emptyAccounts, setEmptyAccounts] = useState<any[]>([]);\n  const connection = useMemo(() => new Connection(\"https://api.mainnet-beta.solana.com\", \"singleGossip\"), []);\n  const [triggerUpdate, setTriggerUpdate] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    (async () => {\n      if (walletAddress && tokenRegistry.size > 0) {\n        const ownerPublicKey = new PublicKey(walletAddress);\n        const emptyAccounts = await listEmptyTokenAccounts(connection, ownerPublicKey, tokenRegistry);\n        setEmptyAccounts(emptyAccounts);\n        setIsLoading(false);\n      }\n    })();\n    console.log(\"Refresh:\", triggerUpdate);\n  }, [connection, walletAddress, tokenRegistry, triggerUpdate]);\n\n  const loadingContent = (\n    <Section>\n      <SectionTitle>\n        Loading...\n      </SectionTitle>\n    </Section>\n  );\n\n  const content = !walletAddress ? <WelcomePage /> : (\n    <MainContent>\n      <Section>\n        <SectionTitle>Connected to</SectionTitle>\n        <SectionContent>\n          <AddressContent>\n            <a href={`https://solscan.io/account/${walletAddress}`} target=\"_blank\" rel=\"noreferrer\">\n              {walletAddress}\n            </a>\n          </AddressContent>\n        </SectionContent>\n      </Section>\n      {isLoading ? loadingContent : (\n        <EmptyTokens {...{\n          emptyAccounts,\n          walletAddress,\n          connection,\n          signTransaction,\n          triggerUpdate,\n          setTriggerUpdate,\n          isLoading,\n          setIsLoading\n        }} />\n      )}\n    </MainContent>\n  );\n\n  return (\n    <Container>\n      {content}\n    </Container>\n  );\n}\n\ninterface EmptyTokensProps {\n  emptyAccounts: any[];\n  walletAddress: string;\n  connection: Connection;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>\n  triggerUpdate: number;\n  setTriggerUpdate: (x: number) => void;\n  isLoading: boolean;\n  setIsLoading: (x: boolean) => void;\n}\n\nfunction EmptyTokens({\n  emptyAccounts,\n  walletAddress,\n  connection,\n  signTransaction,\n  triggerUpdate,\n  setTriggerUpdate,\n  isLoading,\n  setIsLoading\n}: EmptyTokensProps\n) {\n  async function closeAccount(account: any) {\n    const feePayer = new PublicKey(walletAddress);\n    const accountAddress = new PublicKey(account.accountAddress);\n    const recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n\n    const tx = new Transaction({ recentBlockhash, feePayer });\n    tx.add(buildCloseTokenAccountInstruction(feePayer, accountAddress));\n\n    try {\n      const signedTx = await signTransaction(tx);\n      setIsLoading(true);\n\n      const txId = await connection.sendRawTransaction(signedTx.serialize());\n      console.log(txId);\n\n      await new Promise((resolve) => setTimeout(resolve, 4000)); // sleep for 4 seconds\n      setTriggerUpdate(triggerUpdate+1);\n    } catch(e) {\n      console.error(e);\n      setIsLoading(false);\n    }\n  }\n\n  const content = emptyAccounts.length === 0 ? <SectionTitle>No empty accounts</SectionTitle> : (\n    <>\n      <SectionTitle>Zero balance token accounts</SectionTitle>\n      <SectionContent>\n        {emptyAccounts.map((account) => (\n          <TokenContainer key={account.mintAddress}>\n            <TokenItem>\n              <TokenName>{account.name ?? \"unknown\"}</TokenName>\n              <TokenMint>\n                <a href={`https://solscan.io/token/${account.mintAddress}`} target=\"_blank\" rel=\"noreferrer\">\n                  {account.mintAddress}\n                </a>\n              </TokenMint>\n            </TokenItem>\n            <TokenCloseButton onClick={() => closeAccount(account)} disabled={isLoading}>\n              Close\n            </TokenCloseButton>\n          </TokenContainer>\n        ))}\n      </SectionContent>\n    </>\n  );\n\n  return (\n    <Section>\n      {content}\n    </Section>\n  );\n}\n\nfunction WelcomePage() {\n  const { connectWallet }= useWalletContext();\n\n  return (\n    <WelcomeContainer>\n      <ConnectButton onClick={connectWallet}>Connect to Phantom</ConnectButton>\n    </WelcomeContainer>\n  )\n}\n\nexport default MainPage;","import MainPage from './components/MainPage';\nimport { WalletContextProvider, TokenRegistryContextProvider } from './contexts';\n\nfunction App() {\n  return (\n    <WalletContextProvider>\n      <TokenRegistryContextProvider>\n        <MainPage />\n      </TokenRegistryContextProvider>\n    </WalletContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}