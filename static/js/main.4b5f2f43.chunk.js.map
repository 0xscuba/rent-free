{"version":3,"sources":["contexts/tokenRegistryContext.tsx","utils/accounts.ts","components/MainPage.tsx","App.tsx","index.tsx"],"names":["TokenRegistryContext","createContext","Map","TokenRegistryContextProvider","props","useState","tokenRegistry","setTokenRegistry","useEffect","TokenListProvider","resolve","then","tokens","tokenMap","getList","forEach","item","set","address","Provider","value","children","listEmptyTokenAccounts","connection","ownerAddress","a","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","allTokens","map","accountInfo","accountAddress","pubkey","mintAddress","account","data","parsed","info","mint","amount","tokenAmount","name","get","emptyTokens","filter","token","sort","b","localeCompare","buildCloseTokenAccountInstruction","Token","createCloseAccountInstruction","EmptyTokens","emptyAccounts","isLoading","setIsLoading","useWallet","publicKey","signTransaction","useConnection","PublicKey","getRecentBlockhash","recentBlockhash","blockhash","tx","Transaction","feePayer","add","signedTx","sendRawTransaction","serialize","txId","confirmTransaction","console","error","content","length","SectionTitle","SectionContent","TokenContainer","TokenItem","TokenName","TokenMint","href","target","rel","TokenCloseButton","onClick","closeAccount","disabled","Section","LaodingContent","WelcomePage","WelcomeContainer","Container","styled","div","MainContent","AddressContent","span","DisconnectContainer","button","MainPage","context","useContext","Error","useTokenRegistryContext","setEmptyAccounts","size","toBase58","require","App","network","WalletAdapterNetwork","Mainnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","config","commitment","WalletProvider","autoConnect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b5f2f43.chunk.js","sourcesContent":["import { TokenInfo, TokenInfoMap, TokenListContainer, TokenListProvider } from \"@solana/spl-token-registry\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const TokenRegistryContext = createContext<TokenInfoMap>(new Map());\n\nexport function useTokenRegistryContext() {\n  const context = useContext(TokenRegistryContext);\n  if (!context) {\n    throw new Error(\"TokenRegistryContext not set\");\n  }\n\n  return context;\n}\n\nexport function TokenRegistryContextProvider(props: any) {\n  const [tokenRegistry, setTokenRegistry] = useState<TokenInfoMap>(new Map());\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then((tokens: TokenListContainer) => {\n      const tokenMap: TokenInfoMap = new Map();\n      // TODO filterByChainId\n      tokens.getList().forEach((item: TokenInfo) => {\n        tokenMap.set(item.address, item);\n      });\n      setTokenRegistry(tokenMap);\n    });\n  }, []);\n\n  return (\n    <TokenRegistryContext.Provider value={tokenRegistry}>\n      {props.children}\n    </TokenRegistryContext.Provider>\n  );\n}","import { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { TokenInfoMap } from '@solana/spl-token-registry';\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\n\nexport async function listEmptyTokenAccounts(\n  connection: Connection,\n  ownerAddress: PublicKey,\n  tokenRegistry: TokenInfoMap\n) {\n  const { value } = await connection.getParsedTokenAccountsByOwner(\n    ownerAddress,\n    {programId: TOKEN_PROGRAM_ID}\n  );\n\n  const allTokens = value.map((accountInfo: any) => {\n    const accountAddress = accountInfo.pubkey as string;\n    const mintAddress = accountInfo.account.data.parsed.info.mint as string;\n    const amount = accountInfo.account.data.parsed.info.tokenAmount;\n    const name = tokenRegistry.get(mintAddress)?.name;\n    return { accountAddress, mintAddress, amount, name };\n  });\n\n  const emptyTokens = allTokens.filter((token) => token.amount.amount === \"0\");\n  emptyTokens.sort((a, b) => {\n    if (!a.name) {\n      return 1;\n    }\n    \n    if (!b.name) {\n      return -1;\n    }\n\n    return a.name.localeCompare(b.name);\n  });\n  return emptyTokens;\n}\n\nexport function buildCloseTokenAccountInstruction(\n  ownerAddress: PublicKey,\n  accountAddress: PublicKey\n): TransactionInstruction {\n  return Token.createCloseAccountInstruction(\n    TOKEN_PROGRAM_ID,\n    accountAddress,\n    ownerAddress,\n    ownerAddress,\n    []\n  );\n}","import { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { useTokenRegistryContext } from \"../contexts/\";\nimport { buildCloseTokenAccountInstruction, listEmptyTokenAccounts } from \"../utils/accounts\";\nimport styled from \"styled-components\";\nimport { WalletDisconnectButton, WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\n\nfunction MainPage() {\n  const { connection } = useConnection();\n  const { publicKey } = useWallet();\n  const tokenRegistry = useTokenRegistryContext();\n\n  const [emptyAccounts, setEmptyAccounts] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      if (publicKey && tokenRegistry.size > 0 && !isLoading) {\n        const emptyAccounts = await listEmptyTokenAccounts(connection, publicKey, tokenRegistry);\n        setEmptyAccounts(emptyAccounts);\n      }\n    })();\n  }, [connection, publicKey, tokenRegistry, isLoading]);\n\n  if (!publicKey) {\n    return (\n      <Container>\n        <WelcomePage />\n      </Container>\n    );\n  }\n\n  const content = isLoading ? <LaodingContent /> : (\n    <EmptyTokens {...{\n      emptyAccounts,\n      isLoading,\n      setIsLoading\n    }} />\n  );\n\n  return (\n    <Container>\n      <MainContent>\n        <Section>\n          <SectionTitle>Connected to</SectionTitle>\n          <SectionContent>\n            <AddressContent>\n              <a href={`https://solscan.io/account/${publicKey.toBase58()}`} target=\"_blank\" rel=\"noreferrer\">\n                {publicKey.toBase58()}\n              </a>\n            </AddressContent>\n            <DisconnectContainer>\n              <WalletDisconnectButton />\n            </DisconnectContainer>\n          </SectionContent>\n        </Section>\n        {content}\n      </MainContent>\n    </Container>\n  );\n}\n\nfunction EmptyTokens({\n  emptyAccounts,\n  isLoading,\n  setIsLoading\n}: {\n  emptyAccounts: any[];\n  isLoading: boolean;\n  setIsLoading: (isLoading: boolean) => void;\n}\n) {\n  const { publicKey, signTransaction } = useWallet();\n  const { connection } = useConnection();\n\n  async function closeAccount(account: any) {\n    if (!publicKey || !signTransaction) {\n      return;\n    }\n\n    const accountAddress = new PublicKey(account.accountAddress);\n    const recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n\n    const tx = new Transaction({ recentBlockhash, feePayer: publicKey });\n    tx.add(buildCloseTokenAccountInstruction(publicKey, accountAddress));\n\n    try {\n      const signedTx = await signTransaction(tx);\n\n      setIsLoading(true);\n      const txId = await connection.sendRawTransaction(signedTx.serialize());\n      await connection.confirmTransaction(txId, \"processed\");\n    } catch(e) {\n      console.error(e);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const content = emptyAccounts.length === 0 ? <SectionTitle>No empty accounts</SectionTitle> : (\n    <>\n      <SectionTitle>Zero balance token accounts</SectionTitle>\n      <SectionContent>\n        {emptyAccounts.map((account) => (\n          <TokenContainer key={account.mintAddress}>\n            <TokenItem>\n              <TokenName>{account.name ?? \"unknown\"}</TokenName>\n              <TokenMint>\n                <a href={`https://solscan.io/token/${account.mintAddress}`} target=\"_blank\" rel=\"noreferrer\">\n                  {account.mintAddress}\n                </a>\n              </TokenMint>\n            </TokenItem>\n            <TokenCloseButton onClick={() => closeAccount(account)} disabled={isLoading}>\n              Close\n            </TokenCloseButton>\n          </TokenContainer>\n        ))}\n      </SectionContent>\n    </>\n  );\n\n  return (\n    <Section>\n      {content}\n    </Section>\n  );\n}\n\nfunction LaodingContent() {\n  return (\n    <Section>\n      <SectionTitle>\n        Loading...\n      </SectionTitle>\n    </Section>\n  );\n}\n\nfunction WelcomePage() {\n  return (\n    <WelcomeContainer>\n      <WalletMultiButton />\n    </WelcomeContainer>\n  )\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #030403;\n  font-size: 16px;\n  margin-top: 25px;\n`;\n\nconst MainContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst AddressContent = styled.span`\n  font-family: Monospace;\n\n  a, a:visited, a:hover {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n`\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n`;\n\nconst SectionTitle = styled.span`\n  display: block;\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 16px;\n`;\n\nconst SectionContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TokenContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  min-width: 520px;\n  margin-bottom: 20px;\n`;\n\nconst TokenItem = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TokenName = styled.span`\n  display: block;\n  font-weight: bold;\n  font-family: Monospace;\n  margin-bottom: 4px;\n`;\n\nconst TokenMint = styled.span`\n  display: block;\n  font-family: Monospace;\n\n  a, a:visited, a:hover {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst DisconnectContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 8px;\n`;\n\nconst TokenCloseButton = styled.button`\n  background-color: transparent;\n  color: #86726c;\n  border: 4px solid #86726c;\n  border-radius: 12px;\n  padding: 4px 8px;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  font-weight: bold;\n  &:hover {\n    background-color: rgba(134, 114, 108, 0.9);\n    color: #f6f6f2;\n  }\n`;\n\nconst WelcomeContainer = styled.div`\n  display: flex;\n`;\n\nexport default MainPage;","import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { getLedgerWallet, getPhantomWallet, getSolflareWallet, getSolletExtensionWallet, getSolletWallet } from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { useMemo } from 'react';\nimport MainPage from './components/MainPage';\nimport { TokenRegistryContextProvider } from './contexts';\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nfunction App() {\n  const network = WalletAdapterNetwork.Mainnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(() => [\n    getPhantomWallet(),\n    getSolflareWallet(),\n    getLedgerWallet(),\n    getSolletWallet({ network }),\n    getSolletExtensionWallet({ network }),\n  ], [network]);\n\n  return (\n    <ConnectionProvider endpoint={endpoint} config={{ commitment: \"processed\" }}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <TokenRegistryContextProvider>\n            <MainPage />\n          </TokenRegistryContextProvider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}